<?php
/**
 * Created by PhpStorm.
 * User: zhangjunmei
 * Date: 2019-08-29
 * Time: 15:26
 */

namespace app\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Http\Requests\StoreCafeRequest;
use App\Models\CafePhoto;
use App\Utilities\GaodeMaps;
use App\Models\Cafe;
use App\Utilities\Tagger;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class CafesController extends Controller
{
    public function getCafes()
    {
        // TODO: Change the autogenerated stub
        //$cafes = Cafe::all();
        $cafes = Cafe::with('brewMethods')
            ->with(['tags' => function ($query) {
                $query->select('name');
            }])
            ->get();
        return response()->json($cafes);
    }

    public function  getCafe($id)
    {
        $cafe = Cafe::where('id', '=', $id)
            ->with('brewMethods')
            ->withCount('userLike')
            ->withCount('likes')
            ->with('tags')
            ->first();
        return response()->json($cafe);
    }

    public  function postNewCafe(StoreCafeRequest $request)
    {
        $addedCafes = [];
        //获取所有的位置信息
        $olocations = $request->input('locations');

        //locations是数组，所以第二个参数要指定为true
        $locations = json_decode($olocations, true);
        //parent elment
        $parentCafe = new Cafe();

        $parentCafe->name = $request->input('name');
        $parentCafe->location_name = $locations[0]['name']?:'';
        $parentCafe->address = $locations[0]['address'];
        $parentCafe->city = $locations[0]['city'];
        $parentCafe->state = $locations[0]['state'];
        $parentCafe->zip = $locations[0]['zip'];

        $coordinates = GaodeMaps::geocodeAddress($parentCafe->address, $parentCafe->city, $parentCafe->state);
        $parentCafe->latitude = $coordinates['lat'];
        $parentCafe->longitude = $coordinates['lng'];

        $parentCafe->roaster = $request->input('roaster') ? 1: 0;
        $parentCafe->website = $request->input('website');
        $parentCafe->description = $request->input('description');

        //$parentCafe->added_by = $request->user()->id;
        $parentCafe->save();

        //save photo
        $photo = $request->file('picture');
        if ($photo && $photo->isValid()){
            $destinationPath = storage_path('app/public/photos/' . $parentCafe->id);

            if (!file_exists($destinationPath)){
                mkdir($destinationPath);
            }

            //filename
            $filename = time().'-'.$photo->getClientOriginalName();

            $photo->move($destinationPath, $filename);

            $cafePhoto = new CafePhoto();

            $cafePhoto->cafe_id = $parentCafe->id;
            $cafePhoto->uploaded_by = Auth::user()->id;
            $cafePhoto->file_url = $destinationPath.DIRECTORY_SEPARATOR.$filename;

            $cafePhoto->save();
        }

        $brewMethods = $locations[0]['methodsAvailable'];

        $tags = $locations[0]['tags'];

        $parentCafe->brewMethods()->sync($brewMethods);

        Tagger::tagCafe($parentCafe, $tags, $request->user()->id);

        array_push($addedCafes, $parentCafe->toArray());

        //添加其他的分店
        if (count($locations) > 1){
            for ($i = 1; $i < count($locations); $i++){
                $cafe = new Cafe();

                $cafe->parent = $parentCafe->id;
                $cafe->name = $request->input('name');
                $cafe->location_name = $locations[$i]['name']?:'';
                $cafe->address = $locations[$i]['address'];
                $cafe->city = $locations[$i]['city'];
                $cafe->state = $locations[$i]['state'];
                $cafe->zip = $locations[$i]['zip'];

                $coordinates = GaodeMaps::geocodeAddress($cafe->address, $cafe->city, $cafe->state);
                $cafe->latitude = $coordinates['lat'];
                $cafe->longitude = $coordinates['lng'];

                $cafe->roaster = $request->input('roaster') ? 1: 0;
                $cafe->website = $request->input('website');
                $cafe->description = $request->input('description');

                //$parentCafe->added_by = $request->user()->id;
                $cafe->save();

                $brewMethods = $locations[$i]['methodsAvailable'];
                $cafe->brewMethods()->sync($brewMethods);
                Tagger::tagCafe($cafe, $locations[$i]['tags'], $request->user()->id);
                array_push($addedCafes, $cafe->toArray());

            }
        }

        return response()->json($addedCafes, 201);
    }

    public function postLikeCafe($cafeID){
        if (Auth::check()) {
            $cafe = Cafe::where('id', '=', $cafeID)->first();
            $cafe->likes()->attach(Auth::user()->id, [
                'created_at' => Carbon::now(),
                'updated_at' => Carbon::now()
            ]);

            $cafe = Cafe::where('id', '=', $cafeID)->with('brewMethods')->withCount('userLike')->withCount('likes')->first();

            return response()->json($cafe, 201);
        } else {
            return response()->json(['cafe_liked' => false, 'err' => 'user not loggin'], 401);
        }

    }

    public function deleteLikeCafe($cafeID){
        if (Auth::check()) {
            $cafe = Cafe::where('id', '=', $cafeID)->first();
            Log::info('user id='.Auth::user()->id);
            $cafe->likes()->detach(Auth::user()->id);

            $cafe = Cafe::where('id', '=', $cafeID)->with('brewMethods')->withCount('userLike')->withCount('likes')->first();
            if ($cafe == null){
                Log::alert('no user found');
            }
            //响应码201，不能随便换。。刚才用的204 就导致奇葩的问题。返回了另一个页面，跳转了。
            return response()->json($cafe, 201);
        } else {
            return response(['err' => 'user not loggin'], 401);
        }
    }

    /**
     * @param Request $request
     * @param $cafeID
     * @return \Illuminate\Http\JsonResponse
     */
    public function postAddTags(Request $request, $cafeID){
        $cafe = Cafe::find($cafeID);
        $tags = $request->input['tags'];

        Tagger::tagCafe($cafe, $tags, Auth()->user()->id);

        $cafe = Cafe::where('id', '=', $cafeID)
            ->with('brewMethods')
            ->with('userLike')
            ->with('tags')
            ->first();

        return response()->json($cafe, 201);
    }

    /**
     * @param $cafeID
     * @param $tagID
     * @return \Illuminate\Http\JsonResponse
     */
    public function deleteCafeTag($cafeID, $tagID){
        DB::table('cafes_users_tags')->where('cafe_id', $cafeID)->where('tag_id', $tagID)->where('user_id', Auth::user()->id)->delete();
        return response(null, 204);
    }
}